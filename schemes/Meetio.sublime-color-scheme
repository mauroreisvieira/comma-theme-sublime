{
    "name": "Meetio",
    "author": "Mauro Reis Vieira <mauroreisvieira@gmail.com>",
    "variables": {
        "caret": "#ffcc00",
        "foreground": "#eeffff",
        "background": "#263238",
        "comments": "#9294a3",
        "blue": "#82aaff",
        "brown": "#c17e70",
        "cyan": "#65ddd9",
        "green": "#c3e88d",
        "orange": "#ff8d58",
        "pink": "#f07178",
        "purple": "#b9a7ff",
        "red": "#ff767b",
        "yellow": "#ffc312"
    },
    "globals": {
        "foreground": "var(foreground)",
        "background": "var(background)",
        "caret": "var(caret)",
        "block_caret": "var(caret)",
        "line_highlight": "color(var(foreground) alpha(0.1))",
        "selection": "color(var(cyan) alpha(0.1))",
        "selection_border": "var(blue)",
        "selection_corner_style": "cut",
        "selection_corner_radius": "cut",
        "inactive_selection": "color(var(cyan) alpha(0.1))",
        "misspelling": "var(red)",
        "shadow": "color(var(background) alpha(0.5))",
        "gutter_foreground": "color(var(foreground) alpha(0.2))",
        "active_guide": "var(cyan)",
        "stack_guide": "var(cyan)",
        "fold_marker": "var(yellow)",
        "highlight": "var(cyan)",
        "find_highlight": "var(yellow)",
        "find_highlight_foreground": "#3d3d3d",
        "brackets_options": "underline",
        "brackets_foreground": "#3d3d3d",
        "bracket_contents_options": "underline",
        "bracket_contents_foreground": "var(cyan)",
        "line_diff_width": "3",
        "line_diff_added": "color(var(green) alpha(0.6))",
        "line_diff_modified": "color(var(blue) alpha(0.6))",
        "line_diff_deleted": "color(var(red) alpha(0.6))",
        "tags_options": "stippled_underline",
        "tags_foreground": "var(pink)"
    },
    "rules": [
        {
            "name": "[CSS] String",
            "scope": "source.css string",
            "foreground": "var(green)"
        },
        {
            "name": "[CSS] Classes",
            "scope": "entity.other.attribute-name.class",
            "foreground": "var(purple)"
        },
        {
            "name": "[CSS] Tag",
            "scope": "entity.name.tag.css",
            "foreground": "var(yellow)"
        },
        {
            "name": "[CSS] ID",
            "scope": "entity.other.attribute-name.id.css",
            "foreground": "var(red)"
        },
        {
            "name": "[CSS] Properties",
            "scope": "source.css support.type, source.sass support.type, source.scss support.type, source.less support.type, source.stylus",
            "foreground": "var(foreground)"
        },
        {
            "name": "[CSS] Variable",
            "scope": "source.scss variable.declaration.sass, support.type.custom-property.css, support.type.custom-property.scss, variable.other.sass, variable.other.scss",
            "foreground": "var(brown)"
        },
        {
            "name": "[CSS] Properties Value",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Constant Numeric",
            "scope": "constant.numeric.css",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "[CSS] Property Name",
            "scope": "meta.property-name.css",
            "foreground": "var(foreground)"
        },
        {
            "name": "[CSS] Tag",
            "scope": "source.css entity.name.tag.custom.css",
            "foreground": "var(red)"
        },
        {
            "name": "[CSS] Pseudo Class",
            "scope": "entity.other.pseudo-class.css",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[CSS] Pseudo Element",
            "scope": "entity.other.pseudo-element.css",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[CSS] Important",
            "scope": "keyword.other.important.css",
            "foreground": "var(red)"
        },
        {
            "name": "[CSS] Unit",
            "scope": "keyword.other.unit.css",
            "foreground": "var(orange)"
        },
        {
            "name": "[CSS] Font Name",
            "scope": "support.constant.font-name.css",
            "foreground": "var(pink)"
        },
        {
            "name": "[CSS] Color Values",
            "scope": "support.constant.color.w3c-standard-color-name.css, constant.other.color.rgb-value.css, support.constant.color.w3c-extended-color-keywords.css",
            "foreground": "var(cyan)"
        },
        {
            "name": "[CSS] Function",
            "scope": "source.css meta.property-list.css meta.property-value.css meta.function-call.css support.function.color.css, support.function.var.css, support.function.filter.css, support.function.calc.css, support.function.gradient.css, source.css meta.property-list.css meta.property-value.css meta.function-call.css support.function.var.css",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[CSS] Property Vendor",
            "scope": "source.css meta.at-rule.media.css keyword.control.at-rule.media.css, support.type.property-vendor.css, support.constant.media.css",
            "foreground": "var(cyan)"
        },
        {
            "name": "[SCSS] Punctuation",
            "scope": "source.scss meta.selector.css keyword.operator.ampersand.sass, source.scss meta.selector.css entity.other.attribute-name.class.css punctuation.definition.entity.css",
            "foreground": "var(cyan)"
        },
        {
            "name": "[SCSS] Prefix",
            "scope": "source.scss meta.property-name.css support.type.vendor-prefix.css",
            "foreground": "var(foreground)"
        },
        {
            "name": "[SCSS] Function Call",
            "scope": "source.scss meta.property-value.css meta.function-call.css support.function.custom.sass, source.scss meta.property-value.css meta.function-call.sass support.function.sass",
            "foreground": "var(blue)",
            "font_style": "normal"
        },
        {
            "name": "[SCSS] Conditional",
            "scope": "source.scss meta.at-rule.sass keyword.control.at-rule.return.sass, source.scss meta.at-rule.sass keyword.control.flow.conditional.sass, source.scss meta.at-rule.sass keyword.control.flow.sass, source.scss meta.at-rule.each.sass keyword.control.flow.sass",
            "foreground": "var(cyan)"
        },
        {
            "name": "[SCSS] Function",
            "scope": "source.scss meta.function.declaration.sass keyword.control.at-rule.sass, source.scss meta.function.declaration.sass meta.function.parameters.sass constant.language.sass, source.css meta.at-rule.import.css keyword.control.at-rule.import.css, source.scss meta.function-call.sass variable.function.sass keyword.control.at-rule.sass",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Diff] Deleted",
            "scope": "diff.deleted, diff.deleted.char",
            "background": "color(var(red) alpha(0.08))",
            "foreground": "var(red)"
        },
        {
            "name": "[Diff] Insert",
            "scope": "diff.inserted, diff.inserted.char",
            "background": "color(var(green) alpha(0.08))",
            "foreground": "var(green)"
        },
        {
            "name": "[Groovy] Conditional",
            "scope": "source.groovy meta.block.groovy keyword.control.groovy, source.groovy meta.block.groovy meta.block.groovy meta.block.groovy keyword.control.groovy, source.groovy meta.block.groovy meta.block.groovy meta.block.groovy keyword.control.exception.groovy",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Groovy] Return",
            "scope": "source.groovy meta.block.groovy meta.block.groovy keyword.control.groovy",
            "foreground": "var(cyan)"
        },
        {
            "name": "[HTML] String",
            "scope": "text.html.basic string",
            "foreground": "var(green)"
        },
        {
            "name": "[HTML] Operator",
            "scope": "keyword.other.template, keyword.other.substitution",
            "foreground": "var(green)"
        },
        {
            "name": "[HTML] Operator",
            "scope": "keyword.operator, constant.other.color, punctuation, punctuation.definition.tag.html, punctuation.definition.tag.begin.html, punctuation.definition.tag.end.html, punctuation.section.embedded",
            "foreground": "var(cyan)"
        },
        {
            "name": "[HTML] Attributes",
            "scope": "entity.other.attribute-name.html, entity.other.attribute-name",
            "foreground": "var(yellow)"
        },
        {
            "name": "[HTML] Tag Name",
            "scope": "entity.name.tag",
            "foreground": "var(red)"
        },
        {
            "name": "[HTML] Tag Attribute",
            "scope": "text.html.basic entity.other.attribute-name",
            "foreground": "var(purple)"
        },
        {
            "name": "[JSON] Key ",
            "scope": "meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(red)"
        },
        {
            "name": "[JSON] Value",
            "scope": "meta.mapping.value.json string.quoted.double.json",
            "foreground": "var(green)"
        },
        {
            "name": "[JSON] Constant",
            "scope": "constant.language.json",
            "foreground": "var(purple)"
        },
        {
            "name": "[JSON] Character Escape",
            "scope": "constant.character.escape.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] Constant Numeric",
            "scope": "constant.numeric.json",
            "foreground": "var(purple)"
        },
        {
            "name": "[JSON] Punctuation Section",
            "scope": "punctuation.section.sequence.begin.json, punctuation.section.sequence.end.json",
            "foreground": "var(blue)"
        },
        {
            "name": "[JSON] Punctuation Mapping",
            "scope": "punctuation.section.mapping.begin.json, punctuation.section.mapping.end.json",
            "foreground": "var(blue)"
        },
        {
            "name": "[JSON] Punctuation String",
            "scope": "punctuation.definition.string.begin.json, punctuation.definition.string.end.json",
            "foreground": "var(blue)"
        },
        {
            "name": "[JSON] Mapping Level 1",
            "scope": "source.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JSON] Mapping Level 2",
            "scope": "source.json meta.mapping.value.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json",
            "foreground": "var(brown)"
        },
        {
            "name": "[JavaScript] Constructor",
            "scope": "source.js meta.class.js meta.block.js meta.function.declaration.js storage.type.accessor.js, source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts storage.type.ts, meta.function-call.constructor.js, entity.name.function.constructor.js, variable.language.constructor.js, meta.function-call.constructor.ts, entity.name.function.constructor.ts, variable.language.constructor.ts",
            "foreground": "var(purple)"
        },
        {
            "name": "[JavaScript] Object Key",
            "scope": "meta.object-literal.key.js, meta.object-literal.key.ts",
            "foreground": "var(blue)"
        },
        {
            "name": "[JavaScript] Dollar",
            "scope": "variable.other.dollar.only.js, variable.other.dollar.only.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Function",
            "scope": "variable.function, variable.annotation, entity.name.function, meta.class-method.js entity.name.function.js, variable.function",
            "foreground": "var(blue)"
        },
        {
            "name": "[JavaScript] Language Library",
            "scope": "variable.language",
            "foreground": "var(red)",
            "font_style": "italic"
        },
        {
            "name": "[JavaScript] Library",
            "scope": "support.function, support.macro",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "[JavaScript] Support",
            "scope": "support.type, support.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JavaScript] Support",
            "scope": "keyword.control.flow.js, keyword.control.flow.ts",
            "foreground": "var(purple)"
        },
        {
            "name": "[JavaScript] Try Catch",
            "scope": "keyword.control.trycatch.js, keyword.control.trycatch.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Loop",
            "scope": "keyword.control.loop.js, keyword.control.loop.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Conditional",
            "scope": "keyword.control.conditional.js, keyword.control.conditional.ts, keyword.control.switch.js, keyword.control.switch.ts",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Null",
            "scope": "constant.language.null.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Undefined",
            "scope": "constant.language.undefined.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Boolean",
            "scope": "source.js meta.export.js meta.binding.name.js variable.other.constant.js, constant.language.boolean.false.js, constant.language.boolean.true.js, source.js meta.export.js meta.class.js meta.block.js meta.function.js meta.block.js variable.other.constant.js",
            "foreground": "var(orange)"
        },
        {
            "name": "[JavaScript] Return",
            "scope": "source.js meta.function.js meta.block.js keyword.control.flow.js, source.js meta.class.js meta.block.js meta.function.js meta.block.js keyword.control.flow.js, source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts, text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.function.js meta.block.js keyword.control.flow.js",
            "foreground": "var(cyan)"
        },
        {
            "name": "[JavaScript] Object",
            "scope": "source.js meta.class.js meta.block.js meta.function.js meta.block.js meta.function-call.constructor.js meta.group.js meta.object-literal.js variable.other.readwrite.js",
            "foreground": "var(pink)"
        },
        {
            "name": "[Vue] Function Parameter",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.object-literal.js meta.function.declaration.js meta.binding.name.js variable.parameter.function.js",
            "foreground": "var(pink)"
        },
        {
            "name": "[Vue] Object",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.object-literal.key.js",
            "foreground": "var(purple)"
        },
        {
            "name": "[Vue] Object Value",
            "scope": "text.html.vue source.js.embedded.html source.js meta.export.js meta.object-literal.js meta.function.js meta.block.js meta.object-literal.js meta.object-literal.js meta.object-literal.key.js",
            "foreground": "var(brown)"
        },
        {
            "name": "[JavaScript] Declaration",
            "scope": "source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts, source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts, source.ts meta.export.default.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts entity.name.type.ts",
            "foreground": "var(yellow)"
        },
        {
            "name": "[JavaScript] Primitive",
            "scope": "source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts meta.return.type.ts support.type.primitive.ts",
            "foreground": "var(pink)"
        },
        {
            "name": "[JavaScript] Parameters",
            "scope": "source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts, variable.parameter.function.js, variable.parameter.function.ts, source.ts meta.export.default.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Changed",
            "scope": "markup.changed",
            "foreground": "var(blue)"
        },
        {
            "name": "[Markdown] Headings",
            "scope": "markdown.heading, markup.heading | markup.heading entity.name, markup.heading.markdown punctuation.definition.heading.markdown",
            "font_style": "bold",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Links",
            "scope": "string.other.link, markup.underline.link",
            "font_style": "italic",
            "foreground": "var(purple)"
        },
        {
            "name": "[Markdown] Link Description",
            "scope": "entity.name.reference.link.markdown, string.other.link.description.title.markdown, markup.underline.link.image.markdown",
            "foreground": "var(purple)"
        },
        {
            "name": "[Markdown] Link Description",
            "scope": "markup.list.unnumbered.markdown meta.paragraph.list.markdown meta.link.inline.description.markdown, meta.block-level.markdown markup.quote.markdown meta.link.inline.description.markdown, text.html.markdown meta.paragraph.markdown meta.link.inline.description.markdown",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Markdown] Image Inline",
            "scope": "meta.paragraph.markdown meta.link.inline.description.markdown meta.image.inline.description.markdown, meta.paragraph.markdown meta.image.inline.description.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "[Markdown] Bold",
            "scope": "markup.bold",
            "font_style": "bold",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Italic",
            "scope": "markup.italic",
            "font_style": "italic",
            "foreground": "var(red)"
        },
        {
            "name": "[Markdown] Bold & Italic",
            "scope": "markup.italic markup.bold | markup.bold markup.italic",
            "font_style": "bold italic"
        },
        {
            "name": "[Markdown] Line",
            "scope": "punctuation.definition.thematic-break",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Markdown] Numbered List Bullet",
            "scope": "markup.list.numbered.bullet",
            "foreground": "var(green)"
        },
        {
            "name": "[Markdown] Code Inline",
            "scope": "markup.raw.inline",
            "background": "color(var(blue) alpha(0.05))"
        },
        {
            "name": "[Markdown] Code Block",
            "scope": "meta.paragraph.markdown meta.code-fence.definition.begin.text.markdown-gfm, meta.paragraph.markdown meta.code-fence.definition.end.text.markdown-gfm, meta.paragraph.markdown markup.raw.code-fence.markdown-gfm",
            "background": "color(var(blue) alpha(0.05))"
        },
        {
            "name": "[Markdown] Punctuation",
            "scope": "(text punctuation.definition.italic | text punctuation.definition.bold)",
            "foreground": "var(purple)"
        },
        {
            "name": "[Markdown] Blockquotes",
            "scope": "text.html.markdown meta.block-level.markdown markup.quote.markdown",
            "font_style": "italic"
        },
        {
            "name": "[PHP] Inherited Class",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.path.php entity.other.inherited-class.php",
            "foreground": "var(orange)"
        },
        {
            "name": "[PHP] Storage",
            "scope": "storage.modifier.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Extends",
            "scope": "storage.modifier.extends.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Construct",
            "scope": "support.function.construct.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Echo",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php support.function.construct.php",
            "font_style": "normal",
            "foreground": "var(pink)"
        },
        {
            "name": "[PHP] Var",
            "scope": "support.function.var.php, embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php keyword.control.exception.php, embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php meta.catch.php keyword.control.exception.catch.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Block",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php storage.modifier.php, embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php storage.modifier.php",
            "foreground": "var(purple)"
        },
        {
            "name": "[PHP] Function",
            "scope": "meta.function-call.php support.function, embedding.php text.html.basic meta.embedded.block.php source.php meta.function.php meta.block.php meta.group.php meta.function-call.php support.function.array.php, embedding.php text.html.basic meta.embedded.block.php source.php meta.function.php meta.block.php meta.function-call.php support.function.string.php",
            "font_style": "normal",
            "foreground": "var(blue)"
        },
        {
            "name": "[PHP] Return",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php keyword.control.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Condition",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.function.php meta.block.php keyword.control.php",
            "foreground": "var(cyan)"
        },
        {
            "name": "[PHP] Constant",
            "scope": "embedding.php text.html.basic meta.embedded.block.php source.php meta.class.php meta.block.php meta.function.php meta.block.php constant.language.php",
            "foreground": "var(orange)"
        },
        {
            "name": "Comment",
            "scope": "comment, punctuation.definition.comment",
            "foreground": "var(comments)",
            "font_style": "italic"
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Class",
            "scope": "meta.export.default meta.class storage.type.class, meta.class storage.type.class, meta.interface storage.type.interface",
            "foreground": "var(purple)"
        },
        {
            "name": "Entity Name",
            "scope": "meta.export meta.class entity.name.class, meta.class entity.name.class, meta.class entity.name.type.class",
            "foreground": "var(yellow)"
        },
        {
            "name": "Interface Name",
            "scope": "meta.interface entity.name.type.interface",
            "foreground": "var(yellow)"
        },
        {
            "name": "Function Call",
            "scope": "meta.function-call.constructor variable.type, meta.export meta.object-literal meta.function meta.block meta.function-call.constructor variable.type, meta.export meta.object-literal meta.object-literal meta.function meta.block meta.function-call.constructor variable.type, meta.catch meta.block meta.function-call.constructor variable.type, meta.function-call meta.group meta.function meta.block meta.function meta.block meta.function-call.constructor variable.type, meta.try meta.block meta.function-call.constructor variable.type, meta.class meta.block meta.function meta.block meta.function-call.constructor variable.type",
            "foreground": "var(yellow)"
        },
        {
            "name": "Import & Export",
            "scope": "meta.use keyword.other.use, meta.use keyword.control.import.use, meta.at-rule.import keyword.control.at-rule.import, meta.import keyword.control.import-export, meta.export keyword.control.import-export, meta.export.default keyword.control.export, meta.export.default keyword.control.default",
            "foreground": "var(cyan)",
            "font_style": "italic"
        },
        {
            "name": "Declaration",
            "scope": "meta.interface storage.modifier, meta.export.default meta.class meta.method.declaration storage.modifier, meta.class storage.modifier",
            "foreground": "var(purple)"
        },
        {
            "name": "Inherited",
            "scope": "meta.interface entity.other.inherited-class, meta.class meta.path entity.other.inherited-class, meta.class entity.other.inherited-class",
            "foreground": "var(orange)"
        },
        {
            "name": "Constant",
            "scope": "constant.character, constant.other",
            "foreground": "var(purple)"
        },
        {
            "name": "Variable",
            "scope": "variable.member",
            "foreground": "var(red)"
        },
        {
            "name": "Operator",
            "scope": "keyword.operator, keyword - keyword.operator, keyword.operator.word",
            "foreground": "var(purple)"
        },
        {
            "name": "Punctuation",
            "scope": "punctuation.terminator, punctuation.section, punctuation.definition.annotation",
            "foreground": "var(cyan)"
        },
        {
            "name": "Storage",
            "scope": "storage, storage.type",
            "foreground": "var(purple)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(green)"
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "foreground": "#fff",
            "background": "color(var(red) alpha(0.9))"
        },
        {
            "name": "Deprecated",
            "scope": "invalid.deprecated",
            "foreground": "#fff",
            "background": "color(var(yellow) alpha(0.9))"
        },
        {
            "name": "[Perl] Statements",
            "scope": "source.perl keyword.control.flow.perl, source.perl keyword.control.flow.perl, source.perl keyword.control.conditional.perl",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Perl] Variable",
            "scope": "source.perl variable.other.readwrite.global.perl",
            "foreground": "var(foreground)"
        },
        {
            "name": "[Perl] Function",
            "scope": "source.perl support.function.perl",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Perl] Function",
            "scope": "source.perl meta.function.perl meta.block.perl keyword.other.flow.perl",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Python] Variables",
            "scope": "source.python meta.function.parameters.python variable.parameter.python, source.python meta.function-call.arguments.python meta.qualified-name.python meta.generic-name.python, source.python meta.function-call.arguments.python variable.parameter.python",
            "foreground": "var(orange)"
        },
        {
            "name": "[Python] Function Arguments",
            "scope": "source.python meta.function-call.arguments.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(foreground)"
        },
        {
            "name": "[Python] Statement While",
            "scope": "source.python meta.statement.while.python constant.language.python, source.python constant.language.python",
            "foreground": "var(pink)"
        },
        {
            "name": "[Python] Annotation",
            "scope": "source.python meta.function.parameters.annotation.python meta.qualified-name.python support.type.python",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Python] Constant",
            "scope": "source.python meta.function.parameters.default-value.python constant.language.python",
            "foreground": "var(purple)"
        },
        {
            "name": "[Python] Print",
            "scope": "source.python keyword.other.print.python, source.python meta.function-call.python meta.qualified-name.python variable.function.python support.function.builtin.python",
            "font_style": "normal",
            "foreground": "var(pink)"
        },
        {
            "name": "[Python] Function Parameters",
            "scope": "source.python meta.item-access.arguments.python meta.qualified-name.python meta.generic-name.python, source.python meta.item-access.arguments.python meta.qualified-name.python support.type.python, source.python meta.function.parameters.annotation.python meta.item-access.arguments.python meta.qualified-name.python support.type.python",
            "foreground": "var(green)"
        },
        {
            "name": "[Python] Generic Name",
            "scope": "source.python meta.function.parameters.annotation.python meta.item-access.arguments.python meta.item-access.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(blue)"
        },
        {
            "name": "[Python] Exception",
            "scope": "source.python meta.statement.raise.python meta.function-call.python meta.qualified-name.python variable.function.python support.type.exception.python",
            "foreground": "var(red)"
        },
        {
            "name": "[Python] Statements",
            "scope": "source.python meta.statement.for.python keyword.control.flow.for.python, source.python meta.statement.if.python keyword.control.flow.conditional.python, source.python meta.statement.conditional.python keyword.control.flow.conditional.python, source.python keyword.control.flow.break.python, source.python keyword.control.flow.continue.python, source.python meta.statement.while.python keyword.control.flow.while.python, source.python keyword.control.flow.pass.python",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Python] Function Parameters",
            "scope": "source.python meta.item-access.python meta.qualified-name.python meta.generic-name.python, source.python meta.function.parameters.annotation.python meta.item-access.python meta.qualified-name.python meta.generic-name.python",
            "foreground": "var(yellow)"
        },
        {
            "name": "[Python] Return",
            "scope": "source.python keyword.control.flow.return.python",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Yaml] Key",
            "scope": "entity.name.tag.yaml",
            "foreground": "var(cyan)"
        },
        {
            "name": "[Yaml] Numeric",
            "scope": "source.yaml constant.numeric.float.yaml, source.yaml constant.numeric.integer.yaml",
            "foreground": "var(purple)"
        },
        {
            "name": "[Yaml] Anchor",
            "scope": "source.yaml meta.property.yaml entity.name.other.anchor.yaml",
            "foreground": "var(yellow)"
        }
    ]
}